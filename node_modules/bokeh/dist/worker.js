// Generated by CoffeeScript 1.7.1
(function() {
  var Worker, zmq,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  zmq = require("zmq");

  module.exports = Worker = (function() {
    function Worker(options) {
      this.options = options != null ? options : {};
      this._message = __bind(this._message, this);
      this.tasks = {};
      this._connect();
    }

    Worker.prototype.close = function() {
      return this.socket.close();
    };

    Worker.prototype.registerTask = function(name, klass) {
      return this.tasks[name] = klass;
    };

    Worker.prototype._connect = function() {
      var endpoint;
      endpoint = this.options.dealer || "ipc:///tmp/bokeh-dealer";
      this.socket = zmq.socket("rep");
      this.socket.on("message", this._message);
      return this.socket.connect(endpoint);
    };

    Worker.prototype._message = function(payload) {
      var task;
      task = JSON.parse(payload);
      return this._runTask(task, (function(_this) {
        return function(error, data) {
          payload = error != null ? JSON.stringify({
            id: task.id,
            response: "failed",
            data: error.toString()
          }) : JSON.stringify({
            id: task.id,
            response: "completed",
            data: data
          });
          return _this.socket.send(payload);
        };
      })(this));
    };

    Worker.prototype._runTask = function(task, callback) {
      var Task, error, instance;
      try {
        Task = this.tasks[task.request];
        if (Task == null) {
          throw new Error("Unknown task '" + task.request + "'");
        }
        instance = new Task(this);
        return instance.run(task.data, callback);
      } catch (_error) {
        error = _error;
        return callback(error);
      }
    };

    return Worker;

  })();

}).call(this);
