// Generated by CoffeeScript 1.7.1
(function() {
  var Queue,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Queue = (function() {
    function Queue(worker, concurrency) {
      this.worker = worker;
      this.concurrency = concurrency;
      this._process = __bind(this._process, this);
      this.tasks = [];
      this.workers = 0;
    }

    Queue.prototype.push = function(tasks, callback) {
      var task, _i, _len, _results;
      if (!(tasks instanceof Array)) {
        tasks = [tasks];
      }
      _results = [];
      for (_i = 0, _len = tasks.length; _i < _len; _i++) {
        task = tasks[_i];
        this.tasks.push({
          data: task,
          callback: callback
        });
        _results.push(process.nextTick(this._process));
      }
      return _results;
    };

    Queue.prototype._process = function() {
      var task;
      if (this.workers < this.concurrency && this.tasks.length > 0) {
        task = this.tasks.shift();
        this.workers += 1;
        return this.worker(task.data, (function(_this) {
          return function() {
            _this.workers -= 1;
            if (task.callback != null) {
              task.callback.apply(task, arguments);
            }
            return process.nextTick(_this._process);
          };
        })(this));
      }
    };

    return Queue;

  })();

}).call(this);
