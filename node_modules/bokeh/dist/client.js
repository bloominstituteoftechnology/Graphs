// Generated by CoffeeScript 1.7.1
(function() {
  var Client, EventEmitter, Handle, uuid, zmq,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  uuid = require("node-uuid");

  zmq = require("zmq");

  EventEmitter = require("events").EventEmitter;

  Handle = (function(_super) {
    __extends(Handle, _super);

    function Handle(id, callback) {
      this.id = id;
      this.callback = callback;
    }

    return Handle;

  })(EventEmitter);

  module.exports = Client = (function() {
    function Client(options) {
      this.options = options != null ? options : {};
      this._message = __bind(this._message, this);
      this.handles = {};
      this._connect();
    }

    Client.prototype.close = function() {
      return this.socket.close();
    };

    Client.prototype.submitTask = function(name, data, callback) {
      var handle, payload;
      handle = this._addHandle(uuid(), callback);
      payload = JSON.stringify({
        id: handle.id,
        request: name,
        data: data
      });
      this.socket.send([new Buffer(""), payload]);
      return handle;
    };

    Client.prototype._connect = function() {
      var endpoint;
      endpoint = this.options.router || "ipc:///tmp/bokeh-router";
      this.socket = zmq.socket("dealer");
      this.socket.on("message", this._message);
      return this.socket.connect(endpoint);
    };

    Client.prototype._message = function() {
      var envelopes, payload, task, _i;
      envelopes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), payload = arguments[_i++];
      task = JSON.parse(payload);
      switch (task.response) {
        case "submitted":
          return this._submitted(task);
        case "completed":
          return this._completed(task);
        case "failed":
          return this._failed(task);
        default:
          throw new Error("Unknown response '" + task.response + "'");
      }
    };

    Client.prototype._submitted = function(task) {
      var handle;
      handle = this._getHandle(task.id);
      return handle.emit("submit");
    };

    Client.prototype._completed = function(task) {
      var handle;
      handle = this._getHandle(task.id);
      if (typeof handle.callback === "function") {
        handle.callback(null, task.data);
      }
      handle.emit("complete", task.data);
      return this._removeHandle(handle);
    };

    Client.prototype._failed = function(task) {
      var handle;
      handle = this._getHandle(task.id);
      if (typeof handle.callback === "function") {
        handle.callback(task.data);
      }
      if (handle.listeners("error").length !== 0) {
        handle.emit("error", task.data);
      }
      return this._removeHandle(handle);
    };

    Client.prototype._getHandle = function(id) {
      return this.handles[id];
    };

    Client.prototype._addHandle = function(id, callback) {
      var handle;
      handle = new Handle(id, callback);
      this.handles[id] = handle;
      return handle;
    };

    Client.prototype._removeHandle = function(handle) {
      return delete this.handles[handle.id];
    };

    return Client;

  })();

}).call(this);
