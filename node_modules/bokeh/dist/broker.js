// Generated by CoffeeScript 1.7.1
(function() {
  var Broker, Log, Queue, async, fs, zmq,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  async = require("async");

  fs = require("fs");

  zmq = require("zmq");

  Log = require("log");

  Queue = require("./queue");

  module.exports = Broker = (function() {
    function Broker(options) {
      this.options = options != null ? options : {};
      this._submitTask = __bind(this._submitTask, this);
      this._dealerRx = __bind(this._dealerRx, this);
      this._routerRx = __bind(this._routerRx, this);
      this._initLog();
      this._initStore();
      this._initSockets();
      this._bindRouter();
      this._bindDealer();
      this._submitTasks();
    }

    Broker.prototype._initLog = function() {
      var level, stream, _ref, _ref1;
      level = ((_ref = this.options.log) != null ? _ref.level : void 0) || "info";
      stream = ((_ref1 = this.options.log) != null ? _ref1.path : void 0) != null ? fs.createWriteStream(this.options.log.path, {
        flags: "a"
      }) : process.stdout;
      return this.log = new Log(level, stream);
    };

    Broker.prototype._initStore = function() {
      var Store, type, _ref, _ref1, _ref2;
      type = ((_ref = this.options.store) != null ? _ref.type : void 0) || "memory";
      Store = require("./stores/" + type);
      this.store = new Store((_ref1 = this.options.store) != null ? _ref1.options : void 0);
      return this.queue = new Queue((function(_this) {
        return function(task, callback) {
          return _this.store.write(task.id, task, callback);
        };
      })(this), ((_ref2 = this.options.store) != null ? _ref2.maxConnections : void 0) || 1);
    };

    Broker.prototype._initSockets = function() {
      this.router = zmq.socket("router");
      return this.dealer = zmq.socket("dealer");
    };

    Broker.prototype._bindRouter = function() {
      var endpoint;
      endpoint = this.options.router || "ipc:///tmp/bokeh-router";
      this.router.on("message", this._routerRx);
      return this.router.bind(endpoint, (function(_this) {
        return function() {
          return _this.log.info("Router listening on %s", endpoint);
        };
      })(this));
    };

    Broker.prototype._bindDealer = function() {
      var endpoint;
      endpoint = this.options.dealer || "ipc:///tmp/bokeh-dealer";
      this.dealer.on("message", this._dealerRx);
      return this.dealer.bind(endpoint, (function(_this) {
        return function() {
          return _this.log.info("Dealer listening on %s", endpoint);
        };
      })(this));
    };

    Broker.prototype._routerRx = function() {
      var envelopes, payload, task, _i;
      envelopes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), payload = arguments[_i++];
      task = JSON.parse(payload);
      return this.queue.push(task, (function(_this) {
        return function(error) {
          if (error != null) {
            _this._routerTx(envelopes, {
              id: task.id,
              response: "failed",
              data: error
            });
            return _this.log.error("Failed to write task: %s (%s)", task.id, error);
          } else {
            _this._dealerTx(envelopes, payload);
            _this._routerTx(envelopes, {
              id: task.id,
              response: "submitted"
            });
            return _this.log.info("Task submitted: %s", task.id);
          }
        };
      })(this));
    };

    Broker.prototype._dealerRx = function() {
      var envelopes, payload, task, _i;
      envelopes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), payload = arguments[_i++];
      task = JSON.parse(payload);
      switch (task.response) {
        case "completed":
          this.log.info("Task completed: %s", task.id);
          break;
        case "failed":
          this.log.error("Task failed: %s (%s)", task.id, task.data);
          break;
        default:
          throw new Error("Unknown response '" + task.response + "'");
      }
      return this.store["delete"](task.id, (function(_this) {
        return function(error) {
          if (error != null) {
            return _this.log.error("Failed to delete task: %s (%s)", task.id, error);
          } else {
            return _this._routerTx(envelopes, payload);
          }
        };
      })(this));
    };

    Broker.prototype._routerTx = function(envelopes, payload) {
      if (!(payload instanceof Buffer)) {
        payload = JSON.stringify(payload);
      }
      return this.router.send([envelopes, payload]);
    };

    Broker.prototype._dealerTx = function(envelopes, payload) {
      if (!(payload instanceof Buffer)) {
        payload = JSON.stringify(payload);
      }
      return this.dealer.send([envelopes, payload]);
    };

    Broker.prototype._submitTasks = function() {
      return this.store.keys((function(_this) {
        return function(error, ids) {
          if (error != null) {
            throw error;
          }
          return async.forEachSeries(ids, _this._submitTask, function(error) {
            if (error != null) {
              throw error;
            }
          });
        };
      })(this));
    };

    Broker.prototype._submitTask = function(id, callback) {
      return this.store.read(id, (function(_this) {
        return function(error, task) {
          if (error != null) {
            return callback(error);
          } else {
            _this._dealerTx(new Buffer(""), task);
            _this.log.info("Task submitted: %s", task.id);
            return callback(null);
          }
        };
      })(this));
    };

    return Broker;

  })();

}).call(this);
