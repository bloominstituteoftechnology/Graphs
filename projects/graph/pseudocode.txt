Breadth First Traversal:
This is the exact algo you will write for every BFT problem.

# Create an empty queue
# Add the starting vertex_id to the queue
# Create an empty set to store visited vertices
# While the queue is not empty...
    # Dequeue the first vertex
    # If that vertex has not been visited...
        # Mark it as visited
        # Then add all of its neighbors to the back of the queue

Depth First Traversal:
The DFT algo is almost identical to the BFT algo, except you use a stack
instead of a queue. So, items are pushed/popped to/from the top of the
stack (The stack is LIFO).

# Create an empty stack
# Push the starting vertex_id to the stack
# Create an empty Set to store visited vertices
# While the stack is not empty...
    # Pop the first vertex
    # Check if it's been visited
    # If it has not been visited...
        # Mark it as visited
        # Then push all of its neighbors to the top of the stack

Depth First Traversal Recursive:

# Initialize visited if not initialized
# Check if the node is visited
# If not visited...
    # Mark it as visited
    # Print starting_vertex
    # Call DFT_Recursive on each neighbor

Breadth First Search:

# Create an empty queue
# Add A PATH TO the starting vertex_id to the queue
# Create a Set to store visited verticies
# While the queue is not empty...
    # Dequeue the first PATH
    # Grab the last vertex from the PATH
    # CHECK IF IT'S THE TARGET
        # If so, return the path
    # Check if it's been visited
    # If it has not been visited...
        # Mark it as visited...
        # Then add A PATH to its neighbors to the back of the queue
            # COPY THE PATH
            # Append the neighbor to the new path
            # Enqueue the new path to the back of the queue

Depth First Search:

# Create an empty stack
# Push A PATH TO the starting vertex_id to the stack
# Create a Set to store visited verticies
# While the stack is not empty...
    # Pop the first PATH
    # Grab the last vertex from the PATH
    # Check if it's the target
        # If so, return the path
    # Check if it's been visited
    # If it has not been visited...
        # Mark it as visited
        # Then add A PATH to its neighbors to the top of the stack
            # COPY THE PATH and append the new vertex
            # Add the new path to the top of the stack

Depth First Search Recursive:

# Initialize visited if it's not yet initialized
# Initialize path if it's not yet initialized
# Check if starting vertex has been visited
# If not...
    # Mark it as visited
    # Copy path and add starting_vertex
    # If starting vertex is destination...
        # return new path
    # Call DFS_Recursive on each neighbor
    # Check if new path is not None...
        # If not None, return new path
